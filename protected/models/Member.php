<?php/** * This is the model class for table "{{_users}}". * * The followings are the available columns in table '{{_users}}': * @property string $id * @property string $username * @property string $email * @property string $password_hash * @property string $temp_password * @property string $first_name * @property string $last_name * @property string $first_char * @property integer $login_attemp * @property string $created_date * @property string $last_logged_in * @property string $ip_address * @property integer $role_id * @property integer $application_id * @property integer $status * @property string $gender * @property string $phone * @property string $verify_code * @property integer $area_code_id * @property string $address * @property integer $status_subscribe * @property string $company_name * @property integer $relation_user * @property string $secondary_give_name * @property string $secondary_family_name * @property string $secondary_email * @property string $secondary_contact_number */class Member extends _BaseModel{    public $password_confirm;    public $new_password;    public $hasPlayer = false;    public $error;    public $term_agreement = false;    public $garbage_email;    public $checkboxSubscriber;    /**	 * Returns the static model of the specified AR class.	 * @param string $className active record class name.	 * @return Member the static model class	 */	public static function model($className=__CLASS__)	{		return parent::model($className);	}	/**	 * @return string the associated database table name	 */	public function tableName()	{		return '{{_users}}';	}	/**	 * @return array validation rules for model attributes.	 */	public function rules()	{		// NOTE: you should only define rules for those attributes that		// will receive user inputs.		return array(                    //begin - member registration - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number, checkboxSubscriber', 'safe', 'on'=>'create_membership'),                    array('email, password_hash, first_name, last_name, created_date, role_id, application_id, status, phone, relation_user, term_agreement', 'required', 'on'=>'create_membership'),                    array('email','unique','message'=>'This email address is not available','on'=>'create_membership'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'create_membership'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'create_membership'),                    array('phone, secondary_contact_number', 'length', 'min'=>1, 'max'=>20,'on'=>'create_membership'),                    array('password_confirm', 'compare', 'compareAttribute'=>'password_hash','on'=>'create_membership'),                    array('hasPlayer', 'required', 'message' => 'You must choose one player at least.', 'on'=>'create_membership'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'create_membership'),                    //end - member registration - hbao                    ////begin - member registration - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'update_membership'),                    array('email, first_name, last_name, created_date, role_id, application_id, status, phone, relation_user, term_agreement', 'required', 'on'=>'update_membership'),                    array('email','unique','message'=>'This email address is not available','on'=>'update_membership'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'update_membership'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'update_membership'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'update_membership'),                    array('phone, secondary_contact_number', 'length', 'min'=>1, 'max'=>20,'on'=>'update_membership'),                    array('password_confirm', 'compare', 'compareAttribute'=>'password_hash','on'=>'update_membership'),                    array('hasPlayer', 'required', 'message' => 'You must choose one player at least.', 'on'=>'update_membership'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'update_membership'),                    //end - member registration - hbao                    //begin - member edit - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'edit_profile'),                    array('email, first_name, last_name, phone, relation_user', 'required', 'on'=>'edit_profile'),                    array('email','unique','message'=>'This email address is not available','on'=>'edit_profile'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'edit_profile'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'edit_profile'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'edit_profile'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'edit_profile'),                    //end - member edit - hbao                    //begin - change password - hbao                    array('password_hash, temp_password, new_password', 'safe', 'on'=>'change_password'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'change_password'),                    array('new_password', 'length', 'min'=>6, 'max'=>32,'on'=>'change_password'),                    array('password_confirm', 'compare', 'compareAttribute'=>'new_password','on'=>'change_password'),                    //end - change password - hbao                    //                    array('email', 'required'),//                    array('login_attemp, role_id, application_id, status, area_code_id, status_subscribe, relation_user', 'numerical', 'integerOnly'=>true),//                    array('username, email, first_name, last_name', 'length', 'max'=>50),//                    array('password_hash, verify_code', 'length', 'max'=>100),//                    array('temp_password, ip_address', 'length', 'max'=>30),//                    array('first_char', 'length', 'max'=>1),//                    array('gender', 'length', 'max'=>6),//                    array('phone', 'length', 'max'=>20),//                    array('address, secondary_give_name, secondary_family_name, secondary_email', 'length', 'max'=>255),//                    array('company_name', 'length', 'max'=>150),//                    array('secondary_contact_number', 'length', 'max'=>15),//                    array('created_date, last_logged_in', 'safe'),                    // The following rule is used by search().                    // Please remove those attributes that should not be searched.                    array('id, username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'search'),		);	}        //hbao        public function functionName() {                    }        /**	 * @return array relational rules.	 */	public function relations()	{            // NOTE: you may need to adjust the relation name and the related            // class name for the relations automatically generated below.            return array(                'players_count'=>array(self::STAT, 'Player', 'user_id'),            );	}	/**	 * @return array customized attribute labels (name=>label)	 */	public function attributeLabels()	{		return array(			'id' => 'ID',			'username' => 'Username',			'email' => 'Primary Email',			'password_hash' => 'Password Hash',			'temp_password' => 'Temp Password',			'first_name' => 'Given Name',			'last_name' => 'Family Name',			'first_char' => 'First Char',			'login_attemp' => 'Login Attemp',			'created_date' => 'Created Date',			'last_logged_in' => 'Last Logged In',			'ip_address' => 'Ip Address',			'role_id' => 'Role',			'application_id' => 'Application',			'status' => 'Status',			'gender' => 'Gender',			'phone' => 'No',			'verify_code' => 'Verify Code',			'area_code_id' => 'Area Code',			'address' => 'Address',			'status_subscribe' => 'Status Subscribe',			'company_name' => 'Company Name',			'relation_user' => 'Relation User',			'secondary_give_name' => 'Secondary Given Name',			'secondary_family_name' => 'Secondary Family Name',			'secondary_email' => 'Secondary Email',			'secondary_contact_number' => 'Secondary Contact Number',		);	}	/**	 * Retrieves a list of models based on the current search/filter conditions.	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.	 */	public function search()	{		// Warning: Please modify the following code to remove attributes that		// should not be searched.		$criteria=new CDbCriteria;		$criteria->compare('t.id',$this->id,true);		$criteria->compare('t.username',$this->username,true);		$criteria->compare('t.email',$this->email,true);		$criteria->compare('t.password_hash',$this->password_hash,true);		$criteria->compare('t.temp_password',$this->temp_password,true);		$criteria->compare('t.first_name',$this->first_name,true);		$criteria->compare('t.last_name',$this->last_name,true);		$criteria->compare('t.first_char',$this->first_char,true);		$criteria->compare('t.login_attemp',$this->login_attemp);		$criteria->compare('t.created_date',$this->created_date,true);		$criteria->compare('t.last_logged_in',$this->last_logged_in,true);		$criteria->compare('t.ip_address',$this->ip_address,true);		$criteria->compare('t.role_id',$this->role_id);		$criteria->compare('t.application_id',$this->application_id);		$criteria->compare('t.status',STATUS_ACTIVE);		$criteria->compare('t.gender',$this->gender,true);		$criteria->compare('t.phone',$this->phone,true);		$criteria->compare('t.verify_code',$this->verify_code,true);		$criteria->compare('t.area_code_id',$this->area_code_id);		$criteria->compare('t.address',$this->address,true);		$criteria->compare('t.status_subscribe',$this->status_subscribe);		$criteria->compare('t.company_name',$this->company_name,true);		$criteria->compare('t.relation_user',$this->relation_user);		$criteria->compare('t.secondary_give_name',$this->secondary_give_name,true);		$criteria->compare('t.secondary_family_name',$this->secondary_family_name,true);		$criteria->compare('t.secondary_email',$this->secondary_email,true);		$criteria->compare('t.secondary_contact_number',$this->secondary_contact_number,true);                $criteria->order = 'created_date DESC';		return new CActiveDataProvider($this, array(                    'criteria'=>$criteria,                    'pagination'=>array(                        'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),                    ),		));	}        public function activate()        {            $this->status = 1;            $this->update();        }        public function deactivate()        {            $this->status = 0;            $this->update();        }	public function defaultScope()	{		return array(			//'condition'=>'',		);	}        public static function checkEmail($model) {            if(empty($model->email)) return '';            $criteria=new CDbCriteria;            $criteria->compare('t.email', trim($model->email));            $user = self::model()->find($criteria);            if(empty($user->id)) return '';            $can_date = date('Y-m-d H:i:s', strtotime("-12 hour", time()));            if($user->status == 2 && strtotime($can_date) > strtotime($user->created_date)){                $user->delete();            }            if($user->status == 2 && strtotime($can_date) <= strtotime($user->created_date)){                return 'garbage_email';            }        }        //hbao        protected function beforeDelete(){            //delete all Order            $orders = RegistrationOrder::findByUser($this->id);            if(!empty($orders)){                foreach ($orders as $order) {                    $order->delete();                }            }            //delete all player            $players = Player::findByUser($this->id);            if(!empty($players)){                foreach ($players as $player) {                    $player->delete();                }            }            IsaTournamentOrder::deleteTournamentOrderByUserId($this->id);            IsaSeasonOrder::deleteSeasonOrderByUserId($this->id);            return parent::beforeDelete();        }}